/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerTokenManager.java */
package myNewPackage;
import java.util.Scanner;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
import java.io.IOException;

/** Token Manager. */
public class SyntaxCheckerTokenManager implements SyntaxCheckerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 11;
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 11;
            return 88;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 1;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x30L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x20L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 40:
         return jjStopAtPos(0, 7);
      case 41:
         return jjStopAtPos(0, 8);
      case 44:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 59:
         return jjStopAtPos(0, 6);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 125:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(2, 15);
         break;
      case 59:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 76:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(8, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(12, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 105;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(62, 63);
                  }
                  else if ((0x2000ac0000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  else if (curChar == 61)
                     jjCheckNAdd(13);
                  else if (curChar == 62)
                     jjCheckNAdd(13);
                  else if (curChar == 60)
                     jjCheckNAdd(13);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if ((0x2000ac0000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 12:
                  if ((0x5000000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 61 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if (curChar == 60)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 62)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if (curChar == 61)
                     jjCheckNAdd(13);
                  break;
               case 17:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 61)
                     jjCheckNAdd(13);
                  break;
               case 28:
                  if (curChar == 32 && kind > 24)
                     kind = 24;
                  break;
               case 51:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 52:
                  if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 55:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 46)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 88:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 93;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 101)
                     jjAddStates(5, 6);
                  else if (curChar == 69)
                     jjAddStates(7, 8);
                  else if (curChar == 116)
                     jjAddStates(9, 10);
                  else if (curChar == 84)
                     jjAddStates(11, 12);
                  else if (curChar == 102)
                     jjAddStates(13, 14);
                  else if (curChar == 105)
                     jjAddStates(15, 16);
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 4:
                  if (curChar == 114 && kind > 12)
                     kind = 12;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 19:
                  if (curChar == 70 && kind > 17)
                     kind = 17;
                  break;
               case 20:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 82 && kind > 20)
                     kind = 20;
                  break;
               case 22:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 111 && kind > 22)
                     kind = 22;
                  break;
               case 25:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 79 && kind > 22)
                     kind = 22;
                  break;
               case 27:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 78)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 110)
                     jjCheckNAdd(28);
                  break;
               case 36:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 83 && kind > 25)
                     kind = 25;
                  break;
               case 42:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 115 && kind > 25)
                     kind = 25;
                  break;
               case 47:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  jjAddStates(2, 4);
                  break;
               case 58:
                  jjAddStates(17, 18);
                  break;
               case 65:
                  if (curChar == 105)
                     jjAddStates(15, 16);
                  break;
               case 66:
                  if (curChar == 116 && kind > 12)
                     kind = 12;
                  break;
               case 67:
                  if (curChar == 110)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if (curChar == 102 && kind > 17)
                     kind = 17;
                  break;
               case 69:
                  if (curChar == 102)
                     jjAddStates(13, 14);
                  break;
               case 70:
                  if (curChar == 97)
                     jjCheckNAdd(66);
                  break;
               case 71:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 114 && kind > 20)
                     kind = 20;
                  break;
               case 74:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 84)
                     jjAddStates(11, 12);
                  break;
               case 76:
                  if (curChar == 78 && kind > 18)
                     kind = 18;
                  break;
               case 77:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 79 && kind > 21)
                     kind = 21;
                  break;
               case 80:
                  if (curChar == 116)
                     jjAddStates(9, 10);
                  break;
               case 81:
                  if (curChar == 110 && kind > 18)
                     kind = 18;
                  break;
               case 82:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 111 && kind > 21)
                     kind = 21;
                  break;
               case 85:
                  if (curChar == 69)
                     jjAddStates(7, 8);
                  break;
               case 86:
                  if (curChar == 69 && kind > 19)
                     kind = 19;
                  break;
               case 87:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 89:
                  if (curChar == 83 && kind > 23)
                     kind = 23;
                  break;
               case 90:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 101)
                     jjAddStates(5, 6);
                  break;
               case 96:
                  if (curChar == 101 && kind > 19)
                     kind = 19;
                  break;
               case 97:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 115 && kind > 23)
                     kind = 23;
                  break;
               case 100:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 105 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   52, 57, 53, 54, 56, 98, 104, 88, 94, 83, 84, 78, 79, 72, 74, 67, 
   68, 58, 59, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\120\122\111\116\103\111\120\101\114", 
"\105\116\104\137\120\122\111\116\103\111\120\101\114", "\73", "\50", "\51", null, null, null, null, null, null, "\100\173\40", 
"\40\175\73", null, null, null, null, null, null, null, null, null, "\54\40", "\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[105];
static private final int[] jjstateSet = new int[210];
static protected char curChar;
/** Constructor. */
public SyntaxCheckerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SyntaxCheckerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 105; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
